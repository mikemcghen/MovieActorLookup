@page "/searchmovies"
@using MovieActorLookup.Models
@inject MovieService MovieService

<h3>Search Movies and Characters</h3>

<div class="mb-3">
    <input type="text" class="form-control" @bind="movieTitle" placeholder="Enter movie title..." />
    <input type="text" class="form-control" @bind="characterName" placeholder="Enter character name..." />
    <button class="btn btn-primary mt-2" @onclick="SearchForActorAndCharacters">Search</button>
</div>

@if (isSearching)
{
    <p>Searching...</p>
}
else if (actor != null)
{
    <h4>Actor: @actor.Name</h4>
    <div class="d-flex flex-wrap">
        @foreach (var movieCharacter in actor.MovieCharacters)
        {
            <div class="card m-2" style="width: 18rem;">
                <img class="card-img-top" src="@($"https://image.tmdb.org/t/p/w500{movieCharacter.MoviePosterPath}")" alt="Movie Poster">
                <div class="card-body">
                    <h5 class="card-title">@movieCharacter.MovieTitle</h5>
                    <p class="card-text">@movieCharacter.CharacterName</p>
                    <small class="text-muted">@movieCharacter.Overview</small>
                    <br />
                    <small class="text-muted">Release Date: @movieCharacter.ReleaseDate</small>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Enter a movie title and character name to begin your search.</p>
}

@code {
    private string movieTitle;
    private string characterName;
    private Actor actor;
    private bool isSearching = false;

    private async Task SearchForActorAndCharacters()
    {
        isSearching = true;
        actor = null;
        StateHasChanged(); // Update UI to show searching status

        if (!string.IsNullOrWhiteSpace(movieTitle) && !string.IsNullOrWhiteSpace(characterName))
        {
            var movies = await MovieService.GetMoviesByTitle(movieTitle);
            foreach (var movie in movies)
            {
                var credits = await MovieService.GetMovieCreditsByMovieId(movie.Id);
                foreach (var castMember in credits.Cast)
                {
                    if (castMember.Character.ToLower().Contains(characterName.ToLower()))
                    {
                        if (actor == null)
                        {
                            actor = new Actor(castMember.Name);
                        }

                        actor.MovieCharacters.Add(new MovieCharacter
                            {
                                MovieTitle = movie.Title,
                                CharacterName = castMember.Character,
                                MoviePosterPath = movie.PosterPath,
                                ReleaseDate = movie.ReleaseDate,
                                Overview = movie.Overview
                            });
                    }
                }
            }
        }

        isSearching = false;
        StateHasChanged(); // Update UI with search results
    }

    private async Task<Movie> GetProperMovieBasedOffOfActorInvolvement(string movieActorTitle, CastMember actor)
    {
        List<Credits> overallCredits = new();

        List<Movie> actorMovies = await MovieService.GetMoviesByTitle(movieActorTitle);

        foreach (Movie movie in actorMovies)
        {
            overallCredits.Add(await MovieService.GetMovieCreditsByMovieId(movie.Id));
        }

        Credits actorMovieCredits = overallCredits.FirstOrDefault(x => x.Cast.Any(c => c.Id == actor.Id));        
        Movie movie1 = actorMovies.Where(x => x.Id == actorMovieCredits.Id).FirstOrDefault();

        return movie1;
    }
}